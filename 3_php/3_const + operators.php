<!DOCTYPE HTML>
<html>
<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
</head>
<body>
<?

define("num", 123, true); //   true - num = NUM,    false   num и NUM разные переменные
							// может быть опеределена в любом месте видимости
echo NUM;

echo "<br>";

const con = "ghj";    // по умолчанию регистрозависимая.  Должна быть определена в самой высокой области видимости

echo con;

//  Предопределённые константы

// _LINE_   текущая строка в файле
// _FILE_  полный путь и имятекущего Файла
// _FUNCTION_ Имя функции
// _CLASS_ Имя класса
// _METHOD_ Имя метода
// _DIR_   Текущий каталог, в котором расположен скрипт
// PHP_VERSION   Версия интерпретатора РНР
// OS_VERSION    Имя операционной системы, под которой работает РНР
// PHP_EOL   Символ конца строки, используемый на текущей платформе:
//           1 \n для Liпux/Mac OS Х и \ r\n для Windows

//   получить полный список доступных в текущий момент констант можно при помощи функции get defined_ constants ().

Следует обратить внимание, что ключевое слово const используется только в классах,
для объявления констант вне классов предназначена функция define ( )


Операторы && и || имеют альтернативу в виде операторов and и or, обладающих
более низким приоритетом. То есть если в арифметических операциях сначала
выполняется умножение и деление и лишь затем сложение и вычитание, то в логических
операторах сначала выполняются && и || и лишь затем and и or.

$flagl = true; 	// истина
$flag2 = false;	// ложь
if ($flagl or $flag2){	// true
	echo '<р>Условие: true (Один из флагов истинен)</р>';
}	
else {
	echo '<р>Условие: false (Оба флага ложны)</р>';
}

//  ====================================================
Особенность логических операторов || и or заключается в том, что если первый
операнд равен true, то в вычислении второго операнда отсутствует надобность -
не зависимо от того, будет он равен true или false, логическое выражение все равно
примет значение true. Поэтому существует практика для функций, возвращающих
в качестве значения true или значение, которое автоматически приводится
к true, осуществлять проверку корректности выполнения при помощи операторов
|| или or

Следует отметить, что функция f ile _get contents () возвращает строку, и если
содержимое запрашиваемой страницы требуется для дальнейших действий, выражение
проверки может выглядеть так

$content = file_get_contents ( 'http: //php.net') or exit ('Ошибка');
echo $content;

Именно тут и проявляется необходимость двух версий операторов ИЛИ с разным
приоритетом ( or и 1 1 ). Оператор or имеет меньший приоритет, чем оператор
"равно" =, поэтому сначала выполняется приравнивание результата функции
file get content () переменной $content и лишь затем в игру вступает оператор
or.
Если бы вместо оператора or использовался оператор ||, имеющий больший приоритет,
чем =, сначала бы осуществлялось вычисление оператора ||, а затем результат
этого присваивался бы переменной $content, в итоге она имела бы не содержимое
страницы, а значение true. Таким образом, если потребовалась бы проверка
корректности выполнения функции, необходимо было бы воспользоваться дополнительными
кавычками 

($content = file_get_contents('http : //php.net')) 11 ехit('Ошибка');
echo $content;

В РНР 7 введен специальный оператор ??, который позволяет проинициализировать
переменную только в том случае, если переменная не была ранее проинициализирована
или ей присвоено значение null 

$у = null ;
$z = ' hello ';
$х = $х ?? 1 ; //  1
$у =$у ?? 2; // 2
$z = $z ?? ' world '; // ' hello '
Если переменная ранее не существовала . она будет создана, а в качестве значения
ей присвоится второй операнд. Если же переменная существует, то ее значение
останется неизменным.







?>
</body>
</html>