<!DOCTYPE HTML>
<html>

<head>
<title>Заголовок страницы</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="http://localhost/test.ru/css/style.css">
</head>

<body>
<style type="text/css">


</style>
<script type="text/javascript">

Если предполагается создать модуль функций для работы с JavaScript-классами, эти
методы не должны объявляться в глобальном пространстве имен. С целью со-
блюдения этого соглашения, реализацию методов можно записать так:
// Создать пустой объект, который будет выполнять функции пространства имен
// Это единственное глобальное имя будет вмещать все остальные имена
var Class = {};
// Определить функции в пространстве имен

Class.define = function(data) { /* здесь находится реализация метода */ }
Class.provides = function(o, c) { /* здесь находится реализация метода */ }

Обратите внимание: здесь не объявляются методы экземпляра (и даже не объяв-
ляются статические методы) JavaScript-класса. Здесь объявляются обычные
функции, ссылки на которые сохраняются в свойствах специально созданного
объекта.
Этот фрагмент иллюстрирует первое правило разработки JavaScript-модулей:
модуль никогда не должен выставлять больше одного имени в глобальном про'
странстве имен. Существуют также два дополнения к этому правилу:

• Если модуль добавляет имя в глобальное пространство имен, документация
к модулю должна четко и ясно отражать назначение этого имени.

• Если модуль добавляет имя в глобальное пространство имен, это имя должно
быть однозначно связано с именем файла, из которого загружен модуль.

Так, если модуль называется Class, необходимо поместить его в файл с именем
Class.js, а сам файл должен начинаться с комментария, который может выгля-
деть примерно следующим образом:
/**
* Class.js: Модуль вспомогательных функций для работы с классами.
*
* Данный модуль определяет единственное глобальное имя "Class".
* Имя Class является пространством имен объекта, а все функции
* сохраняются как ссылки в свойствах этого пространства имен.
**/


</script>









</body>
</html>

