<!DOCTYPE HTML>
<html>

<head>
<title>Заголовок страницы</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="http://localhost/test.ru/css/style.css">
</head>

<body>
<style type="text/css">


</style>
<script type="text/javascript">

Предположим, что мы хотим создать подкласс класса Rectangle, чтобы до
бавить в него свойства и методы, связанные с координатами прямоугольника.
Для этого мы просто должны быть уверены, что объект-прототип нового класса
сам является экземпляром Rectangle и потому наследует все свойства Rectang
le.prototype. Пример 9.3 повторяет определение простого класса Rectanle и затем
расширяет это определение за счет создания нового класса PositionedRectangle.
Пример 9.3. Создание подкласса в JavaScript
// Определение простого класса прямоугольников.
// Этот класс имеет ширину и высоту и может вычислять свою площадь
function Rectangle(w, h) {
this.width = w;
this.height = h;
}
Rectangle.prototype.area = function( ) { return this.width * this.height; }
// Далее идет определение подкласса
function PositionedRectangle(x, y, w, h) {
// В первую очередь необходимо вызвать конструктор надкласса
// для инициализации свойств width и height нового объекта.
// Здесь используется метод call, чтобы конструктор был вызван
// как метод инициализируемого объекта.
// Это называется вызов конструктора по цепочке.
Rectangle.call(this, w, h);
// Далее сохраняются координаты верхнего левого угла прямоугольника
this.x = x;
this.y = y;
}
// Если мы будем использовать объектпрототип по умолчанию,
// который создается при определении конструктора PositionedRectangle(),
// был бы создан подкласс класса Object.
// Чтобы создать подкласс класса Rectangle, необходимо явно создать объектпрототип.
PositionedRectangle.prototype = new Rectangle();
// Мы создали объектпрототип с целью наследования, но мы не собираемся
// наследовать свойства width и height, которыми обладают все объекты
// класса Rectangle, поэтому удалим их из прототипа.
delete PositionedRectangle.prototype.width;
delete PositionedRectangle.prototype.height;
// Поскольку объектпрототип был создан с помощью конструктора
// Rectangle(), свойство constructor в нем ссылается на этот
// конструктор. Но нам нужно, чтобы объекты PositionedRectangle
// ссылались на другой конструктор, поэтому далее выполняется
// присваивание нового значения свойству constructor
PositionedRectangle.prototype.constructor = PositionedRectangle;
// Теперь у нас имеется правильно настроенный прототип для нашего
// подкласса, можно приступать к добавлению методов экземпляров.
PositionedRectangle.prototype.contains = function(x,y) {
return (x > this.x && x < this.x + this.width &&
y > this.y && y < this.y + this.height);
}
Как видно из примера 9.3, создание подклассов в JavaScript выглядит более
сложным, чем наследование от класса Object. Первая проблема связана с необхо-
димостью вызова конструктора надкласса из конструктора подкласса, причем
конструктор надкласса приходится вызывать как метод вновь созданного объек-
та. Затем приходится хитрить и подменять конструктор объекта-прототипа под-
класса. Нам потребовалось явно создать этот объект-прототип как экземпляр
надкласса, после чего надо было явно изменить свойство constructor объекта-
прототипа.1 Может также появиться желание удалить любые свойства, которые
создаются конструктором надкласса в объекте-прототипе, поскольку очень важ-
но, чтобы свойства объекта-прототипа наследовались из его прототипа.
Имея такое определение класса PositionedRectangle, его можно использовать в сво-
их программах примерно так:
var r = new PositionedRectangle(2,2,2,2);
print(r.contains(3,3)); // Вызывается метод экземпляра
print(r.area( )); // Вызывается унаследованный метод экземпляра
// Работа с полями экземпляра класса:
print(r.x + ", " + r.y + ", " + r.width + ", " + r.height);
// Наш объект может рассматриваться как экземпляр всех 3 классов
print(r instanceof PositionedRectangle &&
r instanceof Rectangle &&
r instanceof Object);

</script>









</body>
</html>

