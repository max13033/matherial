<!DOCTYPE HTML>
<html>

<head>
<title>Заголовок страницы</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="http://localhost/test.ru/css/style.css">
</head>

<body>
<style type="text/css">


</style>
<script type="text/javascript">

// 	Исключение – это сигнал, указывающий на возникновение какой-либо исклю-
// чительной ситуации или ошибки. Генерация исключения (throw) – это способ
// просигнализировать о такой ошибке или исключительной ситуации. Перехватить 
// исключение (catch), значит, обработать его, т. е. предпринять действия,
// необходимые или подходящие для восстановления после исключения. В Java-
// Script исключения генерируются в тех случаях, когда возникает ошибка време-
// ни выполнения, тогда программа явно генерирует его с помощью инструкции
// throw. Исключения перехватываются с помощью инструкции try/catch/finally.
// Результатом выражения может быть значение любого типа. Однако обычно это
// объект Error или экземпляр одного из подклассов Error. Также бывает удобно ис-
// пользовать в качестве выражения строку, содержащую сообщение об ошибке
// или числовое значение, обозначающее некоторый код ошибки

function factorial(x) {
// Если входной аргумент не является допустимым,
// генерируем исключение!
	if (x < 0) throw new Error("x не может быть отрицательным");
// В противном случае вычисляем значение и нормальным образом выходим из функции
	for(var f = 1; x > 1; f *= x, x--) /* пустое тело цикла */ ;
		return f;
}


// Инструкция try/catch/finally реализует механизм обработки исключений в Java-
// Script. Конструкция try в этой инструкции просто определяет блок кода, в кото-
// ром обрабатываются исключения. За блоком try следует конструкция catch
// с блоком инструкций, вызываемых, когда где-либо в блоке try возникает исклю-
// чение. За конструкцией catch следует блок finally, содержащий код зачистки,
// который гарантированно выполняется независимо от того, что происходит в бло-
// ке try. И блок catch, и блок finally не являются обязательными, однако после
// блока try должен обязательно присутствовать хотя бы один из них.

try {
// Обычно этот код без сбоев работает от начала до конца.
// Но в какой-то момент в нем может генерироваться исключение
// либо непосредственно с помощью инструкции throw, либо косвенно
// вызовом метода, генерирующего исключение.
}
catch (e) {
// Инструкции в этом блоке выполняются тогда и только тогда, когда
// в блоке try генерируется исключение. Эти инструкции могут
// использовать локальную переменную e, ссылающуюся на объект Error
// или на другое значение, указанное в инструкции throw. Этот блок может
// либо каким-либо образом обработать исключение, либо проигнорировать
// его, делая что-то другое, либо заново сгенерировать исключение
// с помощью инструкции throw.
}
finally {
// Этот блок содержит инструкции, которые выполняются всегда, независимо от того,
// что произошло в блоке try. Они выполняются, если блок try прерван:
// 1) нормальным образом, достигнув конца блока
// 2) из-за инструкции break, continue или return
// 3) с исключением, обработанным приведенным ранее блоком catch
// 4) с неперехваченным исключением, которое продолжает свое
// распространение на более высокие уровни
}

//	реальный пример

try {
	// Просим пользователя ввести число
	var n = prompt("Введите положительное число", "");
	// Вычисляем факториал числа, предполагая, что входные данные корректны
	var f = factorial(n);
	// Показываем результат
	alert(n + "! = " + f);
}
	catch (ex) { // Если введенные данные некорректны, мы попадем сюда
	// Сообщаем пользователю об ошибке
	alert(ex);
}

// В обычной ситуации управление доходит до конца блока try, а затем переходит
// к блоку finally, который выполняет всю необходимую зачистку. Если управле-
// ние вышло из блока try из-за инструкций return, continue или break, перед пере-
// дачей управления в другое место кода исполняется блок finally.

</script>


<? 



?>









</body>
</html>

