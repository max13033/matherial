<!DOCTYPE HTML>
<html>

<head>
<title>Заголовок страницы</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="http://localhost/test.ru/css/style.css">
</head>

<body>
<style type="text/css">


</style>
<script type="text/javascript">

// 9.3.5. Пример: класс Circle
// В примере 9.1 приводится программный код функцииконструктора и объекта
// прототипа, используемых для создания объектов, представляющих круг. Здесь
// можно найти примеры свойств экземпляра, методов экземпляра, свойств класса
// и методов класса.
// Пример 9.1. Класс Circle
// Начнем с конструктора.
function Circle(radius) {
// r – свойство экземпляра, оно определяется
// и инициализируется конструктором.
this.r = radius;
}
// Circle.PI – свойство класса, т. е. свойство функцииконструктора.
Circle.PI = 3.14159;
// Метод экземпляра, который рассчитывает площадь круга.
Circle.prototype.area = function( ) { return Circle.PI * this.r * this.r; }
// Метод класса – принимает два объекта Circle и возвращает объект с большим радиусом.
Circle.max = function(a,b) {
176 Глава 9. Классы, конструкторы и прототипы
if (a.r > b.r) return a;
else return b;
}
// Примеры использования каждого из этих полей:
var c = new Circle(1.0); // Создание экземпляра класса Circle
c.r = 2.2; // Установка свойства экземпляра r
var a = c.area(); // Вызов метода экземпляра area()
var x = Math.exp(Circle.PI); // Обращение к свойству PI класса для выполнения расчетов
var d = new Circle(1.2); // Создание другого экземпляра класса Circle
var bigger = Circle.max(c,d); // Вызов метода класса max()


В примере 9.2 представлен еще один способ определения класса объектов в Java
Script, но несколько более формальный, чем предыдущий. Код и комментарии
достойны тщательного изучения.
Пример 9.2. Класс комплексных чисел
/*
* Complex.js:
* В этом файле определяется класс Complex для представления комплексных чисел.
* Вспомним, что комплексное число – это сумма вещественной и мнимой
* частей числа, и что мнимое число i – это квадратный корень из 1.
*/
/*
* Первый шаг в определении класса – это определение функцииконструктора
* класса. Этот конструктор должен инициализировать все свойства
* экземпляра объекта. Это неотъемлемые "переменные состояния",
* делающие все экземпляры класса разными.
*/
function Complex(real, imaginary) {
this.x = real; // Вещественная часть числа
this.y = imaginary; // Мнимая часть числа
}
/*
* Второй шаг в определении класса – это определение методов экземпляра
* (и возможно других свойств) в объектепрототипе конструктора.
* Любые свойства, определенные в этом объекте, будут унаследованы всеми
* экземплярами класса. Обратите внимание, что методы экземпляра
* неявно работают с ключевым словом this. Для многих методов никаких
* других аргументов не требуется.
*/
// Возвращает модуль комплексного числа. Он определяется как расстояние
// на комплексной плоскости до числа от начала координат (0,0).
Complex.prototype.magnitude = function() {
return Math.sqrt(this.x*this.x + this.y*this.y);
};
// Возвращает комплексное число с противоположным знаком.
Complex.prototype.negative = function() {
9.3. Объектно*ориентированный язык JavaScript 177
return new Complex(this.x, this.y);
};
// Складывает данное комплексное число с заданным и возвращает
// сумму в виде нового объекта.
Complex.prototype.add = function(that) {
return new Complex(this.x + that.x, this.y + that.y);
}
// Умножает данное комплексное число на заданное и возвращает
// произведение в виде нового объекта.
Complex.prototype.multiply = function(that) {
return new Complex(this.x * that.x  this.y * that.y,
this.x * that.y + this.y * that.x);
}
// Преобразует объект Complex в строку в понятном формате.
// Вызывается, когда объект Complex используется как строка.
Complex.prototype.toString = function() {
return "{" + this.x + "," + this.y + "}";
};
// Проверяет равенство данного комплексного числа с заданным.
Complex.prototype.equals = function(that) {
return this.x == that.x && this.y == that.y;
}
// Возвращает вещественную часть комплексного числа.
// Эта функция вызывается, когда объект Complex рассматривается
// как числовое значение.
Complex.prototype.valueOf = function() { return this.x; }
/*
* Третий шаг в определении класса – это определение методов класса,
* констант и других необходимых свойств класса как свойств самой
* функцииконструктора (а не как свойств объектапрототипа
* конструктора). Обратите внимание, что методы класса не используют
* ключевое слово this, они работают только со своими аргументами.
*/
// Складывает два комплексных числа и возвращает результат.
Complex.add = function (a, b) {
return new Complex(a.x + b.x, a.y + b.y);
};
// Умножает два комплексных числа и возвращает полученное произведение.
Complex.multiply = function(a, b) {
return new Complex(a.x * b.x  a.y * b.y,
a.x * b.y + a.y * b.x);
};
// Несколько предопределенных комплексных чисел.
// Они определяются как свойства класса, в котором могут использоваться как "константы".
// (Хотя в JavaScript невозможно определить свойства, доступные только для чтения.)
Complex.ZERO = new Complex(0,0);
Complex.ONE = new Complex(1,0);
Complex.I = new Complex(0,1);


</script>


<? 



?>









</body>
</html>

