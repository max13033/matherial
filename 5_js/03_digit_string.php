<!DOCTYPE HTML>
<html>

<head>
<title>Заголовок страницы</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="http://localhost/test.ru/css/style.css">
</head>

<body>
<style type="text/css">
	
</style>
<script type="text/javascript">

В JavaScript нет разницы между одинарными и двойными кавычками.
Спецсимволы:
\n   переход на новую строку
\b	Backspace
\f	Form feed
\n	New line
\r	Carriage return
\t	Tab
\uNNNN	Символ в кодировке Юникод с шестнадцатеричным кодом `NNNN`. Например, `\u00A9` -- юникодное представление символа копирайт ©

msg = "Hello, " + "world"; 		//  конкатенация
msg.length   // - длина строки msg
var str = "My\n"; // 3 символа. Третий - перевод строки
last_char = s.charAt(s.length – 1);
//  Также для доступа к символу можно использовать квадратные скобки:

var str = "Я - современный браузер!";
alert( str[0] ); // "Я"
//	Разница между этим способом и charAt заключается в том, что если символа нет – charAt выдает пустую строку, а скобки – undefined:

alert( "".charAt(0) ); // пустая строка
alert( "" [0] ); // undefined
sub = s.substring(1,4);  //	извлекает 2, 3 и 4 символы из строки s (т.е с 1 по 4 (не включая 4-й) отсчёт с нуля);
substr(start [, length]);
//	Первый аргумент имеет такой же смысл, как и в substring, а второй содержит не конечную позицию, а количество символов.
	var str = "stringify";
str = str.substr(2,4); // ring, со 2-й позиции 4 символа. Если второго аргумента нет – подразумевается «до конца строки».

slice(start [, end])
Возвращает часть строки от позиции start до, но не включая, позиции end. Смысл параметров – такой же как в substring.
i = s.indexOf('a');		//	Определить позицию первого символа «a» в строке s 
//	 Два спсоба преобразования чиста в строку:

var string_value = String(number);
string_value = number.toString( );

//		========== toString  ===============

//	toString(система счисления)  числа можно записывать не только в 10-ричной, но и в 16-ричной системе. 
//	Но бывает и противоположная задача: получить 16-ричное представление числа. 
//	Для этого используется метод toString(основание системы), например:

 var n = 255;

alert( n.toString(16) ); // ff
//	В частности, это используют для работы с цветовыми значениями в браузере, вида #AABBCC.
//	Основание может быть любым от 2 до 36.
//	Основание 2 бывает полезно для отладки побитовых операций:

var n = 4;
alert( n.toString(2) ); // 100

/*	Метод toString() объекта Number (примитивы чисел автоматически преобразуются в объекты типа Number, благодаря чему можно воспользоваться этим методом)
может принимать один необязательный аргумент, который определяет браузере */

var n = 17;
binary_string = n.toString(2); // Вернет "10001"
octal_string = "0" + n.toString(8); // Вернет "021"
hex_string = "0x" + n.toString(16); // Вернет "0x11"

var n = 123456.789;
n.toFixed(0); // "123457"
n.toFixed(2); // "123456.79"
n.toExponential(1); // "1.2e+5"
n.toExponential(3); // "1.235e+5"
n.toPrecision(4); // "1.235e+5"
n.toPrecision(7); // "123456.8"

var number = Number(string_value);	//	приобразование строки в число (только десятичные)

//	другие способы преобразования строк в числа

parseInt("3 слепых мышки"); // Вернет 3
parseFloat("3.14 метров"); // Вернет 3.14
parseInt("12.34"); // Вернет 12
parseInt("0xFF"); // Вернет 255

parseInt("eleven"); // Вернет NaN
parseFloat("$72.47"); // Вернет NaN
 
//  ================= 	INFInity  =========== 

alert( 1 / 0 ); // Infinity
alert( 12345 / 0 ); // Infinity
// 	Infinity – особенное численное значение, которое ведет себя в точности как математическая бесконечность ∞.
// 	Infinity больше любого числа. Добавление к бесконечности не меняет её.
alert( Infinity > 1234567890 ); // true
alert( Infinity + 5 == Infinity ); // true

// ===============   NaN  =============

// 	Если математическая операция не может быть совершена, то возвращается специальное значение NaN (Not-A-Number).
//	Например, деление 0/0 в математическом смысле неопределено, поэтому его результат NaN:

alert( 0 / 0 ); // NaN

// 	Значение NaN используется для обозначения математической ошибки и обладает следующими свойствами:
// 	Значение NaN – единственное в своем роде, которое не равно ничему, включая себя.
//	Следующий код ничего не выведет:

if (NaN == NaN) alert( "==" ); // Ни один вызов
if (NaN === NaN) alert( "===" ); // не сработает
// 	Значение NaN можно проверить специальной функцией isNaN(n), 
// 	которая преобразует аргумент к числу и возвращает true, если получилось NaN, и false – для любого другого значения.

var n = 0 / 0;

alert( isNaN(n) ); // true
alert( isNaN("12") ); // false, строка преобразовалась к обычному числу 12
//	Значение NaN «прилипчиво». Любая операция с NaN возвращает NaN.

alert( NaN + 1 ); // NaN
//	Если аргумент isNaN – не число, то он автоматически преобразуется к числу.

//	Функция isFinite(n) преобразует аргумент к числу и возвращает true, если это не NaN/Infinity/-Infinity:

alert( isFinite(1) ); // true
alert( isFinite(Infinity) ); // false
alert( isFinite(NaN) ); // false

//	==========		ОКРУГЛЕНИЕ	===========
//	Одна из самых частых операций с числом – округление. В JavaScript существуют целых 3 функции для этого.

Math.floor   -  Округляет вниз
Math.ceil    -  Округляет вверх
Math.round   -  Округляет до ближайшего целого

alert( Math.floor(3.1) );  // 3
alert( Math.ceil(3.1) );   // 4
alert( Math.round(3.1) );  // 3

JavaScript предоставляет базовые тригонометрические и некоторые другие функции для работы с числами.

Тригонометрия
Встроенные функции для тригонометрических вычислений:

Math.acos(x)	-	Возвращает арккосинус x (в радианах)
Math.asin(x)	-	Возвращает арксинус x (в радианах)
Math.atan(x)	-	Возвращает арктангенс x (в радианах)
Math.atan2(y, x)	-	Возвращает угол до точки (y, x). Описание функции: Atan2.
Math.sin(x)	-	Вычисляет синус x
Math.cos(x)	-	Вычисляет косинус x
Math.tan(x)	-	Возвращает тангенс x

Функции общего назначения
Разные полезные функции:

Math.sqrt(x)	-	Возвращает квадратный корень из x.
Math.log(x)	-	Возвращает натуральный (по основанию e) логарифм x.
Math.pow(x, exp)	-	Возводит число в степень, возвращает xexp, 
	например Math.pow(2,3) = 8. Работает в том числе с дробными и 
	отрицательными степенями, например: Math.pow(4, -1/2) = 0.5.

Math.abs(x)	-	Возвращает абсолютное значение числа
Math.exp(x)	-	Возвращает ex, где e – основание натуральных логарифмов.
Math.max(a, b, c...)	-	Возвращает наибольший из списка аргументов
Math.min(a, b, c...)	-	Возвращает наименьший из списка аргументов
Math.random()	-	Возвращает псевдослучайное число в интервале [0,1) – то есть между 
	0 (включительно) и 1 (не включая). Генератор случайных чисел инициализуется текущим временем.


</script>







</body>
</html>

