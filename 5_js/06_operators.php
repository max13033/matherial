<!DOCTYPE HTML>
<html>

<head>
<title>Заголовок страницы</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="http://localhost/test.ru/css/style.css">
</head>

<body>
<style type="text/css">
	
</style>
<script type="text/javascript">
String.localeCompare();	//	сравнивает строки
String.toLowerCase(); 		//	преобразует буквы строки в нижний регистр
String.toUpperCase();		//	преобразует буквы строки в верхний регистр

// Оператор in
var point = { x:1, y:1 }; // Определяем объект
var has_x_coord = "x" in point; // Равно true
var has_y_coord = "y" in point; // Равно true
var has_z_coord = "z" in point; // Равно false; это не трехмерная точка
var ts = "toString" in point; // Унаследованное свойство; равно true

// Оператор instanceof требует, чтобы левым операндом был объект, а правым –
// имя класса объектов. Результатом оператора будет true, если объект, указанный
// слева, представляет собой экземпляр класса, указанного справа; в противном
// случае результатом будет false. В главе 9 мы увидим, что в JavaScript классы
// объектов определяются инициализировавшей их функцией-конструктором.
// Следовательно, правый операнд instanceof должен быть именем функции-конст-
// руктора. Обратите внимание: все объекты представляют собой экземпляры
// класса Object. Например:

var d = new Date(); // Создаем новый объект с помощью конструктора Date()
d instanceof Date; // Равно true; объект d был создан с помощью функции Date()
d instanceof Object; // Равно true; все объекты представляют собой экземпляры класса Object
d instanceof Number; // Равно false; d не является объектом Number
var a = [1, 2, 3]; // Создаем массив с помощью литерала массива
a instanceof Array; // Равно true; a – это массив
a instanceof Object; // Равно true; все массивы представляют собой объекты
a instanceof RegExp; // Равно false; массивы не являются регулярными выражениями


1 + 2 // Сложение. Результат равен 3.
"1" + "2" // Конкатенация. Результат равен "12".
"1" + 2 // Конкатенация; 2 преобразуется в "2". Результат равен "12".
11 < 3 // Численное сравнение. Результат равен false.
"11" < "3" // Строковое сравнение. Результат равен true.
"11" < 3 // Численное сравнение; "11" преобразуется в 11. Результат равен false.
"one" < 3 // Численное сравнение; "one" преобразуется в NaN. Результат равен false.
s = 1 + 2 + " слепых мышей"; // Равно "3 слепых мышей"	эквивалентно	s = (1 + 2) + "слепых мышей";  Результат первой операции - число; второй - строка
t = "слепых мышей: " + 1 + 2; // Равно " слепых мышей: 12"		эквивалентно	t = ("слепых мышей: " + 1) + 2; // Результаты обеих операций - строки

// Результатом оператора typeof будет строка "number", "string" или "boolean", если
// его операндом является число, строка или логическое значение соответственно.
// Для объектов, массивов и (как ни странно) значения null результатом будет
// строка "object". Для операндов-функций результатом будет строка "function",
// а для неопределенного операнда – строка "undefined".

//	оператор delete
var o = {x:1, y:2}; // Определяем переменную; инициализируем ее объектом
delete o.x; // Удаляем одно из свойств объекта; возвращает true
typeof o.x; // Свойство не существует; возвращает "undefined"
delete o.x; // Удаляем несуществующее свойство; возвращает true
delete o; // Объявленную переменную удалить нельзя; возвращает false
delete 1; // Нельзя удалить целое; возвращает true
x = 1; // Неявно объявляем переменную без ключевого слова var
delete x; // Этот вид переменных можно удалять; возвращает true
x; // Ошибка времени выполнения: x не определено

var my = new Object(); // Создаем объект по имени "my"
my.hire = new Date(); // my.hire ссылается на объект Date
my.fire = my.hire; // my.fire ссылается на тот же объект
delete my.hire; // свойство hire удалено; возвращает true
document.write(my.fire); // Но my.fire продолжает ссылаться на объект Date

// Оператору «точка» в качестве левого операнда требуется объект, а в качестве
// правого – идентификатор (имя свойства). Правый операнд не может быть стро-
// кой или переменной, содержащей строку; он должен быть точным именем свой-
// ства или метода без каких-либо кавычек. 
document.lastModified
navigator.appName
frames[0].length
document.write("hello world")

// Оператор [] обеспечивает доступ к элементам массива. Он также обеспечивает
// доступ к свойствам объекта без ограничений, накладываемых на правый опе-
// ранд оператора «точка». Если первый операнд (указанный перед левой скобкой)
// ссылается на массив, то второй операнд (указанный между скобками) должен
// быть выражением, имеющим целое значение. Например:
frames[1]
document.forms[i + j]
document.forms[i].elements[j++]

// Если первый операнд оператора [] представляет собой ссылку на объект, то вто-
// рой должен быть выражением, результатом которого является строка, соответ-
// ствующая имени свойства объекта. Обратите внимание: в этом случае второй
// операнд представляет собой строку, а не идентификатор. Она может быть либо
// константой, заключенной в кавычки, либо переменной или выражением, ссы-
// лающимся на строку. Например:
document["lastModified"]
frames[0]['length']
data["val" + i]

// следующем фрагменте для вывода имен и значений всех
// свойств объекта o используются цикл for/in и оператор []:
for (f in o) {
	document.write('o.' + f + ' = ' + o[f]);
	document.write('<br>');
}


</script>







</body>
</html>

