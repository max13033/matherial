<!DOCTYPE HTML>
<html>

<head>
<title>Заголовок страницы</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="http://localhost/test.ru/css/style.css">
</head>

<body>
<style type="text/css">


</style>
<script type="text/javascript">

//	Несколько примеров создания объектов:
var empty = {}; // Объект без свойств,   тоже самое, что    var empty = new Object()
var point = { x:0, y:0 };
var circle = { x:point.x, y:point.y+1, radius:2 };
var homer = {
"name": "Homer Simpson",
"age": 34,
"married": true,
"occupation": "plant operator",
'email': "homer@example.com"
};

// Свойства объекта работают как переменные: в них можно сохранять значения и считывать их. Например:
// Создаем объект. Сохраняем ссылку на него в переменной.
var book = new Object();
// Устанавливаем свойство в объекте.
book.title = "JavaScript: полное руководство"
// Устанавливаем другие свойства. Обратите внимание на вложенные объекты.
book.chapter1 = new Object();
book.chapter1.title = "Введение в JavaScript";
book.chapter1.pages = 11;
book.chapter2 = { title: "Лексическая структура", pages: 6 };
// Читаем значения некоторых свойств из объекта.
alert("Заголовок: " + book.title + "\n\t" +
"Глава 1 " + book.chapter1.title + "\n\t" +
"Глава 2 " + book.chapter2.title);

// Важно обратить внимание на один момент в этом примере – новое свойство объекта можно добавить, просто присвоив этому свойству значение. 
// Если переменные должны объявляться с помощью ключевого слова var, то для свойств объекта такой необходимости (и возможности) нет. 
// К тому же после создания свойства объекта (в результате присваивания) значение свойства можно будет изменить в любой момент простым присваиванием ему нового значения:
book.title = "JavaScript: Книга с носорогом";

//  для удаления свойства объекта
delete book.chapter2;

//	Доступ к свойствам объекта возможен также при помощи оператора [], который обычно применяется при работе с массивами. Таким образом, следующие два JavaScript выражения имеют одинаковое значение:
object.property
object["property"]
// Важное различие между этими двумя синтаксисами, на которое следует обратить
// внимание, состоит в том, что в первом варианте имя свойства представляет собой
// идентификатор, а во втором – строку.

//В JavaScript любой объект имеет свойство constructor, которое ссылается на функцию-конструктор, используемую для инициализации объекта.
var d = new Date( );
d.constructor == Date; // Равно true

//	Например, тип неизвестного объекта можно выяснить таким способом:
if ((typeof o == "object") && (o instanceof Date))
// Какие-то действия с объектом Date...

// Метод valueOf() во многом похож на метод toString(), но вызывается, когда интерпретатору JavaScript требуется преобразовать объект в значение каког-либо
// элементарного типа, отличного от строки, – обычно в число.

// Метод hasOwnProperty() возвращает true, если для объекта определено не унаследованное свойство с именем, указанным в единственном строковом аргументе
// метода. В противном случае он возвращает false. Например:
var o = {};
o.hasOwnProperty("undef"); // false: свойство не определено
o.hasOwnProperty("toString"); // false: toString – это унаследованное




</script>


<? 



?>









</body>
</html>

