<!DOCTYPE HTML>
<html>

<head>
<title>Заголовок страницы</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />

</head>

<body>
<style type="text/css">
	
</style>

<script type="text/javascript">

//	ВСЕГО 6 ТИПОВ ДАННЫХ

// Число «number»
var n = 123;
n = 12.345;

// 	Строка «string»
var str = "Мама мыла раму";
str = 'Одинарные кавычки тоже подойдут';

//  Булевый (логический) тип «boolean»
// 	У него всего два значения: true (истина) и false (ложь).
//	Как правило, такой тип используется для хранения значения типа да/нет, например:

var checked = true; // поле формы помечено галочкой
checked = false;    // поле формы не содержит галочки

//	Специальное значение «null»
// 	Значение null не относится ни к одному из типов выше, а образует свой отдельный тип, состоящий из единственного значения null:

var age = null;

// 	В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках. Это просто специальное значение, которое имеет смысл «ничего» или «значение неизвестно». В частности, код выше говорит о том, что возраст age неизвестен.

// 	пециальное значение «undefined»
// 	Значение undefined, как и null, образует свой собственный тип, состоящий из одного этого значения. Оно имеет смысл «значение не присвоено».
// 	Если переменная объявлена, но в неё ничего не записано, то её значение как раз и есть undefined:

var x;
alert( x ); // выведет "undefined"
// 	Можно присвоить undefined и в явном виде, хотя это делается редко:

 var x = 123;
x = undefined;

alert( x ); // "undefined"
// 	В явном виде undefined обычно не присваивают, так как это противоречит его смыслу. Для записи в переменную «пустого» или «неизвестного» значения используется null.

// 	Объекты «object»
// 	Первые 5 типов называют «примитивными».
//	Он используется для коллекций данных и для объявления более сложных сущностей.
// 	Объявляются объекты при помощи фигурных скобок {...}, например:

var user = { name: "Вася" };

//	Оператор typeof
// 	Оператор typeof возвращает тип аргумента.
//	У него есть два синтаксиса: со скобками и без:
//	Синтаксис оператора: typeof x.
// 	Синтаксис функции: typeof(x).
// 	Работают они одинаково, но первый синтаксис короче.

// 	Результатом typeof является строка, содержащая тип:

typeof undefined // "undefined"

typeof 0 // "number"

typeof true // "boolean"

typeof "foo" // "string"

typeof {} // "object"

typeof null // "object"  (1)

typeof function(){} // "function"  (2)

// 	Последние две строки помечены, потому что typeof ведет себя в них по-особому.
// 	Результат typeof null == "object" – это официально признанная ошибка в языке, 
// 	которая сохраняется для совместимости. На самом деле null – это не объект, а отдельный тип данных.
// 	Функции мы пройдём чуть позже. Пока лишь заметим, что функции не являются отдельным базовым типом в JavaScript, 
// 	а подвидом объектов. Но typeof выделяет функции отдельно, возвращая для них "function". 
// 	На практике это весьма удобно, так как позволяет легко определить функцию.

</script>

</body>
</html>

