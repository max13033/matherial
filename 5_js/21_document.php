<!DOCTYPE HTML>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>Сайт</title>
  	
</head>

<body>

<script type="text/javascript">

// Если тег <script> помечен атрибутом defer, он не должен содержать никаких обращений к методу document.write(). 
// Атрибут defer сообщает веб-броузеру, что исполнение сценария может быть отложено до того момента, 
// когда документ будет полностью загружен. Но когда это произойдет, будет уже слишком поздно 
// вставлять дополнительное содержимое в документ методом document.write(), поскольку разбор документа уже закончится.

// Эта функция открывает всплывающее окно. Она должна вызываться из обработчика события,
// в противном случае всплывающее окно, скорее всего, будет заблокировано
function hello() {
var w = window.open(); // Создать новое пустое окно
var d = w.document; // Получить ссылку на объект Document
d.open(); // Начать новый документ (необязательно)
d.write("<h1>Привет, МИР!</h1>"); // Вывести содержимое документа
d.close(); // Закрыть документ
}

// Чтобы создать новый документ, прежде всего нужно вызвать метод open() объекта Document, 
// затем вызвать несколько раз метод write(), чтобы вывести содержимое документа, 
// и наконец вызвать метод close() объекта Document, чтобы указать,
// что работа с документом окончена. Этот последний шаг очень важен – если не закрыть документ, 
// броузер будет продолжать показывать, что идет загрузка документа.

//  writeln() идентичен методу write() за исключением того, что после вывода последнего аргумента добавляет символ перевода строки.

// методы объекта Document:

// bgcolor - Цвета фона документа. Это свойство соответствует атрибуту bgcolor тега <body>.

// cookie - Специальное свойство, позволяющее JavaScript-программам читать и писать cookie-файлы.

// domain - Свойство, которое позволяет доверяющим друг другу веб-серверам, принад-
// лежащим одному домену, ослаблять связанные с политикой общего происхо-
// ждения ограничения на взаимодействие между их веб-страницами.

// lastModified - Строка, содержащая дату последнего изменения документа.

// location - Устаревший синоним свойства URL.

// referrer  - URL-адрес документа, содержащего ссылку (если таковая существует), кото-
// рая привела броузер к текущему документу.

// title - Текст между тегами <title> и </title> данного документа.

// URL - Строка, задающая URL-адрес, с которого был загружен документ. Значение
// этого свойства совпадает со значением свойства location.href объекта Window
// за исключением случая перенаправления на стороне сервера.
// Некоторые из этих свойств предоставляют информацию о документе в целом.
// Следующий фрагмент можно поместить в конец каждого вашего документа, что-
// бы автоматически предоставлять пользователю дополнительные сведения о до-
// кументе, которые позволят судить о том, насколько устарел этот документ:
<hr>
<font size="1">
	Документ: <i><script>document.write(document.title);</scr + ipt></i><br>
	URL: <i><script>document.write(document.URL);</scr + ipt></i><br>
	Дата последнего обновления: <i><scr + ipt>document.write(document.lastModified);</scr + ipt></i>
</font>

// Еще одно интересное свойство – referrer. Оно содержит URL-адрес документа,
// из которого пользователь перешел к текущему документу по ссылке. Это свойст-
// во позволяет предотвратить создание глубоких ссылок в недра вашего сайта. Ес-
// ли вы желаете, чтобы все посетители обязательно попадали на вашу домашнюю
// страницу, можно организовать перенаправление, разместив следующий фраг-
// мент в начале всех страниц, за исключением домашней

// <script>
// Если переход выполнен по ссылке из-за пределов сайта,
// выполнить перенаправление на домашнюю страницу
		if (document.referrer == "" || document.referrer.indexOf("mysite.com") == -1)
		window.location = "http://home.mysite.com";
//	</scr + ipt>

// Конечно, этот прием не следует рассматривать как серьезную защитную меру.
// Вполне очевидно, что он не будет работать у пользователей, отключивших в сво-
// их веб-броузерах режим исполнения JavaScript-кода.
// Последнее интересное свойство объекта Document – свойство bgColor. Оно соответ-
// ствует HTML-атрибуту, потому использовать его не рекомендуется.

// anchors[] - Массив объектов Anchor, представляющих якорные элементы документа.
// 	Якорный элемент (anchor) – это именованная позиция в документе, которая
// 	создается с помощью тега <a> и в которой вместо атрибута href определяется
// 	атрибут name. Свойство name объекта Anchor хранит значение атрибута name.
// 	Полное описание объекта Anchor вы найдете в четвертой части книги.

// applets[] - Массив объектов Applet, представляющих Java-апплеты в документе. 

// forms[] - Массив объектов Form, представляющих элементы <form> в документе. Каждый
// 	объект Form обладает собственным свойством-коллекцией с именем elements[],
// 	в котором содержатся объекты, представляющий элементы формы. Прежде
// 	чем форма будет отправлена, объекты Form вызывают обработчик события on-
// 	submit. Этот обработчик может выполнить проверку правильности заполне-
// 	ния формы на стороне клиента: если он возвратит значение false, броузер от-
// 	менит операцию отправки формы. Коллекция forms[] – самое важное свойст-
// 	во ранней версии DOM. 

// images[] - Массив объектов Image, представляющих элементы <img> в документе. Свойст-
// 	во src объекта Image доступно для чтения/записи. Запись строки URL-адреса
// 	в это свойство вынуждает броузер прочитать и отобразить новое изображение
// 	(в старых версиях броузеров размеры нового изображения должны были сов-
// 	падать с размерами оригинала). Программирование свойства src объекта Image
// 	позволяет организовать листание изображений и простейшие виды анима-
// 	ции. 

// links[] - Массив объектов Link, представляющих гипертекстовые ссылки в документе.
// 	Гипертекстовые ссылки в языке HTML создаются с помощью тегов <a>, а при
// 	создании карт ссылок для изображений – с помощью тегов <area>. Свойство 
// 	href объекта Link соответствует атрибуту href тега <a>: в нем хранится строка
// 	URL-адреса ссылки. Кроме того, объекты Link обеспечивают доступ к различ-
// 	ным элементам URL-адреса через свойства, такие как protocol, hostname
// 	и pathname. Благодаря этому объект Link напоминает объект Location. 
// 	Когда указатель мыши наводится на ссылку, объект
// 	Link вызывает обработчик события onmouseover, а когда уводится со ссылки –
// 	обработчик события onmouseout. Когда производится щелчок мышью на ссыл-
// 	ке, объект Link вызывает обработчик события onclick. Если обработчик собы-
// 	тия вернет false, броузер не выполнит переход по ссылке.

<form name="f1"><input type="button" value="Нажми меня"></form>

// Допустим, что тег <form> является первым таким тегом в документе, тогда из
// JavaScript-сценария к получившемуся объекту Form можно обратиться любым из
// трех способов:

document.forms[0] // По номеру формы внутри документа
document.forms.f1 // По имени, как к свойству
document.forms["f1"] // По имени, как к элементу массива

// Фактически установка атрибута name в тегах <form>, <img> и <applet> (но не в теге
// <a>) позволяет обращаться к соответствующим объектам Form, Image и Applet (но
// не к объектам Link и Anchor), как к именованным свойствам объекта Document. То
// есть к форме можно обратиться так:
// document.f1

<form name="shipping">
	...
	<input type="text" name="zipcode">
	...
</form>

// Тогда сослаться на элемент текстового поля ввода в этой форме можно с помо-
// щью интуитивно понятного синтаксиса:
// document.shipping.zipcode

// В этом месте необходимо сделать последнее замечание об именовании элементов
// документа в ранней версии DOM. Что произойдет, если два элемента документа
// имеют в атрибуте name одно и то же значение? Если, например, теги <form> и <img>
// оба имеют имя «n», тогда свойство document.n превратится в массив, которое бу
// дет хранить ссылки на оба элемента.






</script>

</body>
</html>